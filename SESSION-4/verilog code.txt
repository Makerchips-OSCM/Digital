module elevator(
    input wire clk,
    input wire reset,
    input wire [3:0] floor_buttons,
    input wire up_button,
    input wire down_button,
    input wire door_open_button,
    input wire door_close_button,
    output reg [3:0] current_floor,
    output reg [3:0] floor_indicator,
    output reg door_open,
    output reg moving_up,
    output reg moving_down
);

     
        IDLE = 4'd0,
        MOVING_UP = 4'd1,
        MOVING_DOWN = 4'd2,
        DOOR_OPENING = 4'd3,
        DOOR_OPEN = 4'd4,
        DOOR_CLOSING = 4'd5;

    reg [3:0] state, next_state;
    reg [5:0] timer;  
    reg [3:0] destination_floor;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            current_floor <= 4'd0;
            door_open <= 0;
            moving_up <= 0;
            moving_down <= 0;
            timer <= 0;
        end else begin
            state <= next_state;
            if (state == DOOR_OPEN) 
                timer <= (timer < 60) ? timer + 1 : timer;
            else 
                timer <= 0;
        end
    end

    always @(*) begin
        next_state = state;
        floor_indicator = (1 << current_floor);
        
        case(state)
            IDLE: begin
                if (|floor_buttons && floor_buttons != (1 << current_floor)) begin
                    destination_floor = get_destination(floor_buttons);
                    next_state = (destination_floor > current_floor) ? MOVING_UP : MOVING_DOWN;
                end else if (door_open_button) begin
                    next_state = DOOR_OPENING;
                end
            end
            
            MOVING_UP: begin
                moving_up = 1;
                moving_down = 0;
                if (current_floor == destination_floor) begin
                    next_state = DOOR_OPENING;
                    moving_up = 0;
                end else begin
                    current_floor = current_floor + 1;
                end
            end
            
            MOVING_DOWN: begin
                moving_down = 1;
                moving_up = 0;
                if (current_floor == destination_floor) begin
                    next_state = DOOR_OPENING;
                    moving_down = 0;
                end else begin
                    current_floor = current_floor - 1;
                end
            end
            
            DOOR_OPENING: begin
                door_open = 1;
                next_state = DOOR_OPEN;
            end
            
            DOOR_OPEN: begin
                if (door_close_button || timer >= 60 || |floor_buttons) begin
                    next_state = DOOR_CLOSING;
                end
            end
            
            DOOR_CLOSING: begin
                if (door_open_button) begin
                    next_state = DOOR_OPENING;
                end else begin
                    door_open = 0;
                    next_state = IDLE;
                end
            end
        endcase
    end

    function [3:0] get_destination;
        input [3:0] buttons;
        integer i;
        begin
            get_destination = 0;
            for (i = 0; i < 4; i = i + 1)
                if (buttons[i]) get_destination = i;
        end
    endfunction

endmodule